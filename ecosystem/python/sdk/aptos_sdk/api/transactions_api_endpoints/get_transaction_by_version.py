# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import re  # noqa: F401
import sys  # noqa: F401
import typing
import urllib3
import functools  # noqa: F401
from urllib3._collections import HTTPHeaderDict

from aptos_sdk import api_client, exceptions
import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from aptos_sdk.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)

from aptos_sdk.model.aptos_error import AptosError
from aptos_sdk.model.transaction import Transaction

# path params
TxnVersionSchema = StrSchema
RequestRequiredPathParams = typing.TypedDict(
    'RequestRequiredPathParams',
    {
        'txn_version': TxnVersionSchema,
    }
)
RequestOptionalPathParams = typing.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_txn_version = api_client.PathParameter(
    name="txn_version",
    style=api_client.ParameterStyle.SIMPLE,
    schema=TxnVersionSchema,
    required=True,
)
_path = '/transactions/by_version/{txn_version}'
_method = 'GET'
XAPTOSCHAINIDSchema = IntSchema
x_aptos_chain_id_parameter = api_client.HeaderParameter(
    name="X-APTOS-CHAIN-ID",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XAPTOSCHAINIDSchema,
    required=True,
)
XAPTOSLEDGERVERSIONSchema = IntSchema
x_aptos_ledger_version_parameter = api_client.HeaderParameter(
    name="X-APTOS-LEDGER-VERSION",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XAPTOSLEDGERVERSIONSchema,
    required=True,
)
XAPTOSLEDGEROLDESTVERSIONSchema = IntSchema
x_aptos_ledger_oldest_version_parameter = api_client.HeaderParameter(
    name="X-APTOS-LEDGER-OLDEST-VERSION",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XAPTOSLEDGEROLDESTVERSIONSchema,
    required=True,
)
XAPTOSLEDGERTIMESTAMPUSECSchema = IntSchema
x_aptos_ledger_timestampusec_parameter = api_client.HeaderParameter(
    name="X-APTOS-LEDGER-TIMESTAMPUSEC",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XAPTOSLEDGERTIMESTAMPUSECSchema,
    required=True,
)
XAPTOSEPOCHSchema = IntSchema
x_aptos_epoch_parameter = api_client.HeaderParameter(
    name="X-APTOS-EPOCH",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XAPTOSEPOCHSchema,
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = Transaction


class SchemaFor200ResponseBodyApplicationXBcs(
    ListSchema
):
    _items = IntSchema
ResponseHeadersFor200 = typing.TypedDict(
    'ResponseHeadersFor200',
    {
        'X-APTOS-CHAIN-ID': XAPTOSCHAINIDSchema,
        'X-APTOS-LEDGER-VERSION': XAPTOSLEDGERVERSIONSchema,
        'X-APTOS-LEDGER-OLDEST-VERSION': XAPTOSLEDGEROLDESTVERSIONSchema,
        'X-APTOS-LEDGER-TIMESTAMPUSEC': XAPTOSLEDGERTIMESTAMPUSECSchema,
        'X-APTOS-EPOCH': XAPTOSEPOCHSchema,
    }
)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
        SchemaFor200ResponseBodyApplicationXBcs,
    ]
    headers: ResponseHeadersFor200


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'application/x-bcs': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationXBcs),
    },
    headers=[
        x_aptos_chain_id_parameter,
        x_aptos_ledger_version_parameter,
        x_aptos_ledger_oldest_version_parameter,
        x_aptos_ledger_timestampusec_parameter,
        x_aptos_epoch_parameter,
    ]
)
SchemaFor400ResponseBodyApplicationJson = AptosError


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor400ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor404ResponseBodyApplicationJson = AptosError


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor404ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
    },
)
SchemaFor500ResponseBodyApplicationJson = AptosError


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor500ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '404': _response_for_404,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
    'application/x-bcs',
)


class GetTransactionByVersion(api_client.Api):

    def get_transaction_by_version(
        self: api_client.Api,
        path_params: RequestPathParams = frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
        Get transaction by version
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs(RequestPathParams, path_params)
        used_path = _path

        _path_params = {}
        for parameter in (
            request_path_txn_version,
        ):
            parameter_data = path_params.get(parameter.name, unset)
            if parameter_data is unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method=_method,
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response
