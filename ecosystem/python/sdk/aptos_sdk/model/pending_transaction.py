# coding: utf-8

"""
    Aptos Node API

    The Aptos Node API is a RESTful API for client applications to interact with the Aptos blockchain.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from aptos_sdk.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class PendingTransaction(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    _required_property_names = set((
        'hash',
        'sender',
        'sequence_number',
        'max_gas_amount',
        'gas_unit_price',
        'expiration_timestamp_secs',
        'payload',
    ))
    hash = StrSchema
    sender = StrSchema
    sequence_number = StrSchema
    max_gas_amount = StrSchema
    gas_unit_price = StrSchema
    expiration_timestamp_secs = StrSchema

    @classmethod
    @property
    def payload(cls) -> typing.Type['TransactionPayload']:
        return TransactionPayload

    @classmethod
    @property
    def signature(cls) -> typing.Type['TransactionSignature']:
        return TransactionSignature


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        hash: hash,
        sender: sender,
        sequence_number: sequence_number,
        max_gas_amount: max_gas_amount,
        gas_unit_price: gas_unit_price,
        expiration_timestamp_secs: expiration_timestamp_secs,
        payload: payload,
        signature: typing.Union['TransactionSignature', Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'PendingTransaction':
        return super().__new__(
            cls,
            *args,
            hash=hash,
            sender=sender,
            sequence_number=sequence_number,
            max_gas_amount=max_gas_amount,
            gas_unit_price=gas_unit_price,
            expiration_timestamp_secs=expiration_timestamp_secs,
            payload=payload,
            signature=signature,
            _configuration=_configuration,
            **kwargs,
        )

from aptos_sdk.model.transaction_payload import TransactionPayload
from aptos_sdk.model.transaction_signature import TransactionSignature
